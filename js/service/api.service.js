// Сервис для работы с бэкендом. Записываем в переменную наш URL.
const API_URL = 'https://far-ruby-mandarin.glitch.me';

// Функция, которая производит запрос к серверу и достает категории
export const fetchCategories = async () => {
    // Выполняем код внутри try, если возникла какая-то ошибка - то срабатывает catch
    try {
        // Запрашиваем данные о категориях с сервера и помещаем ответ в константу response
        const response = await fetch(`${API_URL}/api/category`);

        // Если статус ответа не соответствует 200 или 201. Выдаем ошибку.
        if (!(response.status === 200 || response.status === 201)) {
            // Создаем исключение throw (прерывание) и передаём туда что за error у нас произошел
            const error = await response.json();
            throw error;
        }

        // Обрабатываем ответ. С помощью метода json() преобразуются json данные в объект, массив, строку или число джаваскрипта в зависимости от того что там приходит в ответе 
        const categories = await response.json();
        // Возвращаем обработанные данные из ответа с сервера. А именно все категории
        return categories;
    
    } catch (error) {
        // При срабатывание catch - возврашаем пойманную ошибку в виде объекта
        return { error };
    }
};

// Функция, которая производит запрос к серверу и достает из сервера данные по карточкам (данным внутри категории)
// Функция получает на вход id
export const fetchCards = async (id) => {
    // Выполняем код внутри try, если возникла какая-то ошибка - то срабатывает catch
    try {
        // Запрашиваем данные с сервера которые относятся к определенной карточке, id которой передали в функцию и помещаем ответ в константу response
        const response = await fetch(`${API_URL}/api/category/${id}`);

        // Если статус ответа не соответствует 200 или 201. Выдаем ошибку.
        if (!(response.status === 200 || response.status === 201)) {
            // Создаем исключение throw (прерывание) и передаём туда что за error у нас произошел
            const error = await response.json();
            throw error;
        }

        // Обрабатываем ответ. С помощью метода json() преобразуются json данные в объект, массив, строку или число джаваскрипта в зависимости от того что там приходит в ответе 
        const cards = await response.json();
        // Возвращаем обработанные данные из ответа с сервера. А именно данные определенной карточки (пары слов внутри этой категории)
        return cards;
    
    } catch (error) {
        // При срабатывание catch - возврашаем пойманную ошибку в виде объекта
        return { error };
    }
};

// Функция, которая производит запрос к серверу, сохраняем туда с помощью метода post данные и достает изменившуюся информацию по всем категориям
// Функция получает на вход data
export const fetchCreateCategory = async (data) => {
    // Выполняем код внутри try, если возникла какая-то ошибка - то срабатывает catch
    try {
        // Запрашиваем измененные данные о категориях с сервера и помещаем ответ в константу response
        const response = await fetch(`${API_URL}/api/category/`, {
            // Делаем запрос метод - POST   
            method: 'POST',
            // Отправляем данные body на сервер. Сервер умеет принимать только данные в формате JSON
            // Формируем JSON с помощью stringify и передаем туда data
            body: JSON.stringify(data)
        });

        // Если статус ответа не соответствует 200 или 201. Выдаем ошибку.
        if (!(response.status === 200 || response.status === 201)) {
            // Создаем исключение throw (прерывание) и передаём туда что за error у нас произошел
            const error = await response.json();
            throw error;
        }

        // Обрабатываем ответ. С помощью метода json() преобразуются json данные в объект, массив, строку или число джаваскрипта в зависимости от того что там приходит в ответе 
        const categories = await response.json();
        // Возвращаем обработанные данные из ответа с сервера. А именно все категории
        return categories;
    
    } catch (error) {
        // При срабатывание catch - возврашаем пойманную ошибку в виде объекта
        return { error };
    }
};

// Функция, которая производит запрос к серверу, обновляет данные в категории и достает обновленную уже информацию по этой категории, заменяя предыдущее место
// Функция получает на вход id и data
export const fetchEditCategory = async (id, data) => {
    // Выполняем код внутри try, если возникла какая-то ошибка - то срабатывает catch
    try {
        // Запрашиваем обновленные данные с сервера которые относятся к определенной карточке, id которой передали в функцию и помещаем ответ в константу response
        const response = await fetch(`${API_URL}/api/category/${id}`, {
            // Делаем запрос методом - PATCH   
            method: 'PATCH',
            // Отправляем данные body. Сервер умеет принимать только данные в формате JSON
            // Формируем JSON с помощью stringify и передаем туда data на место где изменили данные
            body: JSON.stringify(data)
        });

        // Если статус ответа не соответствует 200 или 201. Выдаем ошибку.
        if (!(response.status === 200 || response.status === 201)) {
            // Создаем исключение throw (прерывание) и передаём туда что за error у нас произошел
            const error = await response.json();
            throw error;
        }

        // Обрабатываем ответ. С помощью метода json() преобразуются json данные в объект, массив, строку или число джаваскрипта в зависимости от того что там приходит в ответе 
        const categories = await response.json();
        // Возвращаем обработанные данные из ответа с сервера. А именно все категории с уже измененной категорией к которой обращались
        return categories;
    
    } catch (error) {
        // При срабатывание catch - возврашаем пойманную ошибку в виде объекта
        return { error };
    }
};

// Функция для удаления категории с сервера
// Также функция производит запрос к серверу и достает информацию по нужной категории, чтобы знать что удалять
// Функция получает на вход id 
export const fetchDeleteCategory = async (id) => {
    // Выполняем код внутри try, если возникла какая-то ошибка - то срабатывает catch
    try {
        // Запрашиваем данные с сервера которые относятся к определенной карточке, id которой передали в функцию и помещаем ответ в константу response
        const response = await fetch(`${API_URL}/api/category/${id}`, {
            // Выполняем запрос метод - DELETE. Для удаления данных с сервера у этой категории к которой мы обратились 
            method: 'DELETE',
        });

        // Если статус ответа не соответствует 200 или 201. Выдаем ошибку.
        if (!(response.status === 200 || response.status === 201)) {
            // Создаем исключение throw (прерывание) и передаём туда что за error у нас произошел
            const error = await response.json();
            throw error;
        }

        // Обрабатываем ответ. С помощью метода json() преобразуются json данные в объект, массив, строку или число джаваскрипта в зависимости от того что там приходит в ответе 
        const result = await response.json();
        // Возвращаем обработанные данные из ответа с сервера. А именно уже пустой пустой объект
        return result;
    
    } catch (error) {
        // При срабатывание catch - возврашаем пойманную ошибку в виде объекта
        return { error };
    }
};

